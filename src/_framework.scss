@function build-utility($prefix, $property-map, $value-map) {
  $node-list: [];

  @each $property-key, $property-names in $property-map {
    @each $setting, $value in $value-map {
      $property-values: [];

      @each $property in $property-names {
        $property-values: append(
          $property-values,
          (
            "type": "property",
            "name": $property,
            "value": $value,
          )
        );
      }

      $name: "";
      @if $prefix == "" and $property-key == "*"  {
        $name: "#{$setting}";
      } @else if $property-key == "*" {
        $name: "#{$prefix}-#{$setting}";
      } @else {
        $name: "#{$prefix}#{$property-key}-#{$setting}";
      }

      $node-list: append(
        $node-list,
        (
          "type": "class",
          "name": $name,
          "value": $property-values,
        )
      );
    }
  }

  @return $node-list;
}

@mixin render($node-list) {
  @each $node in $node-list {
    $node-type: map-get($node, "type");
    $node-name: map-get($node, "name");
    $node-value: map-get($node, "value");

    @if $node-type == "property" {
      #{$node-name}: $node-value;
    } @else if $node-type == "class" {
      .#{$node-name} {
        @include render($node-value);
      }
    } @else if $node-type == "media" {
      @media #{$node-name} {
        @include render($node-value);
      }
    }
  }
}

$base-utilities: ();

@mixin utilities($utilities) {
  $master-node-list: [];
  $base-node-list: [];
  $responsive-node-list: [];

  @each $label, $utility-map in $utilities {
    $prefix: map-get($utility-map, "prefix");
    $property-map: map-get($utility-map, "properties");
    $value-map: map-get($utility-map, "values");
    $modifiers: map-get($utility-map, "modifiers");

    $node-list: build-utility($prefix, $property-map, $value-map);

    // Register generated utilities
    @each $node in $node-list {
      $node-name: map-get($node, "name");
      $base-utilities: map-merge($base-utilities, ($node-name: $node)) !global;
    }

    @each $modifier in $modifiers {
      $func: map-get($all-modifiers, $modifier);

      @if $modifier != "responsive" {
        $base-node-list: join($base-node-list, call($func, $node-list));
      } @else {
        $responsive-node-list: join($responsive-node-list, call($func, $node-list));

        // Also apply responsive modifier to modifiers

        @each $sub-modifier in $modifiers {
          @if index(base responsive, $sub-modifier) == null {
            $sub-func: map-get($all-modifiers, $sub-modifier);
            $responsive-node-list: join(
              $responsive-node-list,
              call($func, call($sub-func, $node-list))
            );
          }
        }
      }
    }
  }

  // Render utilities without modifiers
  @include render($base-node-list);

  // Group media queries
  $media-nodes: ();

  @each $node in $responsive-node-list {
    $node-type: map-get($node, "type");
    $query: map-get($node, "name");
    $class-node-list: map-get($node, "value");

    @if not map-has-key($media-nodes, $query) {
      $media-nodes: map-merge($media-nodes, ($query: $class-node-list));
    } @else {
      $media-nodes: map-merge(
        $media-nodes,
        ($query: join(map-get($media-nodes, $query), $class-node-list))
      );
    }
  }

  $grouped-media-node-list: [];
  @each $query, $class-node-list in $media-nodes {
    $grouped-media-node-list: append(
      $grouped-media-node-list,
      (
        "type": "media",
        "name": $query,
        "value": $class-node-list,
      )
    );
  }

  @include render($grouped-media-node-list);
}

@mixin apply($utilities) {
  $base-modifier: map-get($all-modifiers, "base");

  $property-node-list: [];

  @each $utility in $utilities {
    $node: map-get($base-utilities, $utility);
    @if $node == null {
      @error "Utility '#{$utility}' does not exist";
    }

    $property-node-list: join($property-node-list, map-get($node, "value"));
  }

  @include render(call($base-modifier, $property-node-list));
}
