@function build-utility($selector, $property-map, $value-map) {
  $node-list: [];

  @each $property-key, $property-names in $property-map {
    @each $setting, $value in $value-map {
      $property-values: [];

      @each $property in $property-names {
        $property-values: append(
          $property-values,
          (
            "type": "property",
            "name": $property,
            "value": $value,
          )
        );
      }

      $name: "#{$selector}#{$property-key}-#{$setting}";
      @if $selector == "" {
        $name: "#{$property-key}#{$setting}";
      }

      $node-list: append(
        $node-list,
        (
          "type": "class",
          "name": $name,
          "value": $property-values,
        )
      );
    }
  }

  @return $node-list;
}

@mixin render($node-list) {
  @each $node in $node-list {
    $node-type: map-get($node, "type");
    $node-name: map-get($node, "name");
    $node-value: map-get($node, "value");

    @if $node-type == "property" {
      #{$node-name}: $node-value;
    } @else if $node-type == "class" {
      .#{$node-name} {
        @include render($node-value);
      }
    } @else if $node-type == "media" {
      @media #{$node-name} {
        @include render($node-value);
      }
    }
  }
}

$all-utilities: ();

@mixin utility($selector, $property-map, $value-map, $modifiers: base) {
  $node-list: build-utility($selector, $property-map, $value-map);

  // Register generated utilities
  @each $node in $node-list {
    $node-name: map-get($node, "name");
    $all-utilities: map-merge($all-utilities, ($node-name: $node)) !global;
  }

  @each $modifier in $modifiers {
    $func: map-get($all-modifiers, $modifier);
    @include render(call($func, $node-list));

    // Also apply responsive modifier to modifiers
    @if $modifier == "responsive" {
      @each $sub-modifier in $modifiers {
        @if index(base responsive, $sub-modifier) == null {
          $sub-func: map-get($all-modifiers, $sub-modifier);
          @include render(call($func, call($sub-func, $node-list)));
        }
      }
    }
  }
}

@mixin apply($utilities) {
  $base-modifier: map-get($all-modifiers, "base");

  $property-node-list: [];

  @each $utility in $utilities {
    $node: map-get($all-utilities, $utility);
    @if $node == null {
      @error "Utility '#{$utility}' does not exist";
    }

    $property-node-list: join($property-node-list, map-get($node, "value"));
  }

  @include render(call($base-modifier, $property-node-list));
}
