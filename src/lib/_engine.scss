@function build-utility($util-map) {
  // Add defaults
  $defaults: (prefix: "", modifiers: []);
  $util-map: map-merge($defaults, $util-map);

  $prefix: map-get($util-map, "prefix");
  $prop-map: map-get($util-map, "properties");
  $value-map: map-get($util-map, "values");
  $mod-names: map-get($util-map, "modifiers");

  // Error out when required map keys aren't defined
  @if $prop-map == null or length($prop-map) == 0 {
    $error: "Utilities must have `properties`.";
    @return _a_error($error, "build-utility");
  }
  @if $value-map == null or length($value-map) == 0 {
    $error: "Utilities must have `values`.";
    @return _a_error($error, "build-utility");
  }

  @if index($mod-names, "responsive") != null and index($mod-names, "responsive") != 1 {
    $mod-names: _a_remove-nth($mod-names, index($mod-names, "responsive"));
    $mod-names: join("responsive", $mod-names);
  }

  // Build utility
  $util-tree: ();

  @each $prop-key, $prop-name in $prop-map {
    @each $setting, $value in $value-map {
      $props: ();

      @each $prop in $prop-name {
        $props: map-merge($props, ($prop: $value));
      }

      $name: "";
      @if $prefix == "" and $prop-key == "*"  {
        $name: ".#{$setting}";
      } @else if $prop-key == "*" {
        $name: ".#{$prefix}-#{$setting}";
      } @else {
        $name: ".#{$prefix}#{$prop-key}-#{$setting}";
      }

      $util-tree: map-merge($util-tree, ($name: $props));
    }
  }

  $modded-util-tree: ();

  // Add modifiers
  @each $mod-name in $mod-names {
    $modded-tree: call(get-modifier($mod-name), $util-tree);

    // Also apply the responsive modifier to this modifier
    @if index($mod-names, "responsive") != null and $mod-name != "responsive" {
      $responsive-mod: get-modifier("responsive");
      $modded-tree: map-merge($modded-tree, call($responsive-mod, $modded-tree));
    }

    // Use deep map merge to merge classes inside of media queries
    $modded-util-tree: deep-map-merge($modded-util-tree, $modded-tree);
  }

  @return organize-tree(map-merge($util-tree, $modded-util-tree));
}

@function build-utilities($utilities) {
  $tree: ();

  @each $util-map in map-values($utilities) {
    // Use deep map merge to merge classes inside of media queries
    $tree: deep-map-merge($tree, build-utility($util-map));
  }

  @return organize-tree($tree);
}

@function merge-utility-maps($defaults-map, $override-map) {
  $merged-map: $defaults-map;

  @each $util-name, $override-map in $override-map {
    @if type-of($override-map) == "map" {
      // Merge default utility settings with user's settings
      $default-util-map: map-get($merged-map, $util-name);
      $merged-util-map: map-merge($default-util-map, $override-map);
      $merged-map: map-merge($merged-map, ($util-name: $merged-util-map));
    } @else if type-of($override-map) == "bool" and $override-map == false {
      // Remove a utility if the user set it to false
      $merged-map: map-remove($merged-map, $util-name);
    }
  }

  @return $merged-map;
}
