@function build-utility($util-map) {
  // Add defaults
  $defaults: (prefix: "", modifiers: []);
  $util-map: map-merge($defaults, $util-map);

  $prefix: map-get($util-map, "prefix");
  $prop-map: map-get($util-map, "properties");
  $value-map: map-get($util-map, "values");
  $mod-names: map-get($util-map, "modifiers");

  // Error out when required map keys aren't defined
  @if $prop-map == null or length($prop-map) == 0 {
    $error: "Utilities must have `properties`.";
    @return _a_error($error, "build-utility");
  }
  @if $value-map == null or length($value-map) == 0 {
    $error: "Utilities must have `values`.";
    @return _a_error($error, "build-utility");
  }

  @if index($mod-names, "responsive") != null and index($mod-names, "responsive") != 1 {
    $mod-names: _a_remove-nth($mod-names, index($mod-names, "responsive"));
    $mod-names: join("responsive", $mod-names);
  }

  // Build utility
  $util-tree: ();

  @each $prop-key, $prop-name in $prop-map {
    @each $setting, $value in $value-map {
      $props: ();

      @each $prop in $prop-name {
        $props: map-merge($props, ($prop: $value));
      }

      $name: "";
      @if $prefix == "" and $prop-key == "*"  {
        $name: ".#{$setting}";
      } @else if $prop-key == "*" {
        $name: ".#{$prefix}-#{$setting}";
      } @else {
        $name: ".#{$prefix}#{$prop-key}-#{$setting}";
      }

      $util-tree: map-merge($util-tree, ($name: $props));
    }
  }

  $modded-util-tree: ();

  // Add modifiers
  @each $mod-name in $mod-names {
    $modded-tree: call(get-modifier($mod-name), $util-tree);

    // Also apply the responsive modifier to this modifier
    @if index($mod-names, "responsive") != null and $mod-name != "responsive" {
      $responsive-mod: get-modifier("responsive");
      $modded-tree: map-merge($modded-tree, call($responsive-mod, $modded-tree));
    }

    // Use deep map merge to merge classes inside of media queries
    $modded-util-tree: deep-map-merge($modded-util-tree, $modded-tree);
  }

  @return organize-tree(map-merge($util-tree, $modded-util-tree));
}

@function build-utilities($utilities) {
  $tree: ();

  @each $util-map in map-values($utilities) {
    // Use deep map merge to merge classes inside of media queries
    $tree: deep-map-merge($tree, build-utility($util-map));
  }

  @return organize-tree($tree);
}

@function build-settings() {
  $settings: $downforce-settings;

  @if global-variable-exists("breakpoints") {
    $settings: map-merge($settings, (breakpoints: $breakpoints));
  }

  @if global-variable-exists("utilities") {
    $merged-utilities: map-get($settings, "utilities");

    @each $utility-name, $utility-map in $utilities {
      @if type-of($utility-map) == "map" {
        // Merge default utility settings with user's settings
        $default-utility-map: map-get($merged-utilities, $utility-name);

        $merged-utility-map: map-merge($default-utility-map, $utility-map);
        $merged-utilities: map-merge($merged-utilities, ($utility-name: $merged-utility-map));
      } @else if type-of($utility-map) == "bool" {
        // Remove a utility if the user set it to false
        @if not $utility-map {
          $merged-utilities: map-remove($merged-utilities, $utility-name);
        }
      }
    }

    $settings: map-merge($settings, (utilities: $merged-utilities));
  }

  // Merge default keys to utilities
  $final-utilities: map-get($settings, "utilities");
  @each $utility-name, $utility-map in $final-utilities {
    $template-utility: (
      prefix: "",
      modifiers: [],
    );
    $final-utility: map-merge($template-utility, $utility-map);
    $final-utilities: map-merge($final-utilities, ($utility-name: $final-utility));
  }

  $settings: map-merge($settings, (utilities: $final-utilities));

  @return $settings;
}
