@include describe("build-utility [function]") {
  @include it("builds the utility map") {
    $util-map: (
      prefix: "m",
      properties: (
        "*": margin,
        "t": margin-top,
        "b": margin-bottom,
        "y": margin-top margin-bottom,
      ),
      values: (
        "1": 1px,
        "2": 2px,
      ),
    );

    $expected: (
      ".m-1": (margin: 1px),
      ".m-2": (margin: 2px),
      ".mt-1": (margin-top: 1px),
      ".mt-2": (margin-top: 2px),
      ".mb-1": (margin-bottom: 1px),
      ".mb-2": (margin-bottom: 2px),
      ".my-1": (margin-top: 1px, margin-bottom: 1px),
      ".my-2": (margin-top: 2px, margin-bottom: 2px),
    );

    @include assert-equal(build-utility($util-map), $expected);
  }

  @include it("uses the `.{setting}` class name format") {
    $util-map: (
      properties: ("*": display),
      values: (
        "block": block,
        "hidden": none,
      ),
    );

    $expected: (
      ".block": (display: block),
      ".hidden": (display: none),
    );

    @include assert-equal(build-utility($util-map), $expected);

    $util-map: (
      prefix: "border",
      properties: (
        "*": border-width,
        "-t": border-top-width,
      ),
      values: (
        "": 1px,
        "0": 0,
      ),
    );

    $expected: (
      ".border": (border-width: 1px),
      ".border-t": (border-top-width: 1px),
      ".border-0": (border-width: 0),
      ".border-t-0": (border-top-width: 0),
    );

    @include assert-equal(build-utility($util-map), $expected);
  }

  @include it("uses the `.{prefix}-{setting}` class name format") {
    $util-map: (
      prefix: "m",
      properties: ("*": margin),
      values: (
        "1": 1px,
        "2": 2px,
      ),
    );

    $expected: (
      ".m-1": (margin: 1px),
      ".m-2": (margin: 2px),
    );

    @include assert-equal(build-utility($util-map), $expected);
  }

  @include it("uses the `.{prefix}{property-key}-{setting}` class name format") {
    $util-map: (
      prefix: "m",
      properties: ("t": margin-top),
      values: (
        "1": 1px,
        "2": 2px,
      ),
    );

    $expected: (
      ".mt-1": (margin-top: 1px),
      ".mt-2": (margin-top: 2px),
    );

    @include assert-equal(build-utility($util-map), $expected);
  }

  @include it("errors out when `properties` is not defined") {
    $util-map: ();

    $output: build-utility($util-map);
    $expected: "ERROR [build-utility] Utilities must have `properties`.";
    @include assert-equal($output, $expected);
  }

  @include it("errors out when `values` is not defined") {
    $util-map: (properties: ("*": display));

    $output: build-utility($util-map);
    $expected: "ERROR [build-utility] Utilities must have `values`.";
    @include assert-equal($output, $expected);
  }
}

@include describe("build-utilities [function]") {
  $_df_utility_maps: () !global;

  @include register-utility-map(
    "display", (
      properties: ("*": display),
      values: (
        "block": block,
        "hidden": none,
      ),
    )
  );
  @include register-utility-map(
    "margin", (
      prefix: "m",
      properties: ("*": margin),
      values: (
        "1": 1px,
        "2": 2px,
      ),
    )
  );

  @include it("builds the utilities") {
    $utilities: (
      display: (),
      margin: (),
    );

    $expected: (
      ".block": (display: block),
      ".hidden": (display: none),
      ".m-1": (margin: 1px),
      ".m-2": (margin: 2px),
    );

    @include assert-equal(build-utilities($utilities), $expected);
  }

  @include it("groups media queries") {
    $utilities: (
      display: (
        modifiers: responsive,
      ),
      margin: (
        modifiers: responsive,
      ),
    );

    $expected: (
      ".block": (display: block),
      ".hidden": (display: none),
      ".m-1": (margin: 1px),
      ".m-2": (margin: 2px),
      "@media only screen and (min-width: 576px)": (
        ".sm\\:block": (display: block),
        ".sm\\:hidden": (display: none),
        ".sm\\:m-1": (margin: 1px),
        ".sm\\:m-2": (margin: 2px),
      ),
      "@media only screen and (min-width: 768px)": (
        ".md\\:block": (display: block),
        ".md\\:hidden": (display: none),
        ".md\\:m-1": (margin: 1px),
        ".md\\:m-2": (margin: 2px),
      ),
      "@media only screen and (min-width: 992px)": (
        ".lg\\:block": (display: block),
        ".lg\\:hidden": (display: none),
        ".lg\\:m-1": (margin: 1px),
        ".lg\\:m-2": (margin: 2px),
      ),
      "@media only screen and (min-width: 1200px)": (
        ".xl\\:block": (display: block),
        ".xl\\:hidden": (display: none),
        ".xl\\:m-1": (margin: 1px),
        ".xl\\:m-2": (margin: 2px),
      ),
    );

    $output: build-utilities($utilities);
    @include assert-equal($output, $expected);

    // Media queries should be last in the order
    @include assert-equal(
      nth(map-keys($output), -4),
      "@media only screen and (min-width: 576px)"
    );
    @include assert-equal(
      nth(map-keys($output), -3),
      "@media only screen and (min-width: 768px)"
    );
    @include assert-equal(
      nth(map-keys($output), -2),
      "@media only screen and (min-width: 992px)"
    );
    @include assert-equal(
      nth(map-keys($output), -1),
      "@media only screen and (min-width: 1200px)"
    );
  }
}

@include describe("merge-utility-maps [function]") {
  @include it("selectively merges the utility maps") {
    $utils-1: (
      display: (
        properties: ("*": display),
        values: value-map(block, flex, none),
        modifiers: responsive hover,
      ),
    );

    $utils-2: (
      display: (
        values: value-map(inline, block, grid),
        modifiers: hover
      ),
    );

    $expected: (
      display: (
        properties: ("*": display),
        values: value-map(inline, block, grid),
        modifiers: hover,
      ),
    );

    $output: merge-utility-maps($utils-1, $utils-2);
    @include assert-equal($output, $expected);
  }

  @include it("disables utilities") {
    $utils-1: (
      display: (
        properties: ("*": display),
        values: value-map(block, flex, none),
        modifiers: responsive hover,
      ),
      float: (
        properties: ("*": float),
        values: value-map(right, left, none),
      ),
    );

    $utils-2: (float: false);

    $expected: (display: map-get($utils-1, "display"));
    $output: merge-utility-maps($utils-1, $utils-2);
    @include assert-equal($output, $expected);
  }

  @include it("errors when trying to override a non-registered utility") {
    $util-maps: ();
    $util-overrides: (
      display: (
        values: ("block": block),
      ),
    );

    $expected: "ERROR [merge-utility-maps] Trying to override non-existent utililty `display`.";
    $output: merge-utility-maps($util-maps, $util-overrides);
    @include assert-equal($output, $expected);
  }
}
