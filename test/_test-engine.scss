@include describe("build-utility [function]") {
  @include it("builds the utility map") {
    $util-map: (
      prefix: "m",
      properties: (
        "*": margin,
        "t": margin-top,
        "b": margin-bottom,
        "y": margin-top margin-bottom,
      ),
      values: (
        "1": 1px,
        "2": 2px,
      ),
    );

    $expected: (
      ".m-1": (margin: 1px),
      ".m-2": (margin: 2px),
      ".mt-1": (margin-top: 1px),
      ".mt-2": (margin-top: 2px),
      ".mb-1": (margin-bottom: 1px),
      ".mb-2": (margin-bottom: 2px),
      ".my-1": (margin-top: 1px, margin-bottom: 1px),
      ".my-2": (margin-top: 2px, margin-bottom: 2px),
    );

    @include assert-equal(build-utility($util-map), $expected);
  }

  @include it("uses the `.{setting}` class name format") {
    $util-map: (
      properties: ("*": display),
      values: (
        "block": block,
        "hidden": none,
      ),
    );

    $expected: (
      ".block": (display: block),
      ".hidden": (display: none),
    );

    @include assert-equal(build-utility($util-map), $expected);
  }

  @include it("uses the `.{prefix}-{setting}` class name format") {
    $util-map: (
      prefix: "m",
      properties: ("*": margin),
      values: (
        "1": 1px,
        "2": 2px,
      ),
    );

    $expected: (
      ".m-1": (margin: 1px),
      ".m-2": (margin: 2px),
    );

    @include assert-equal(build-utility($util-map), $expected);
  }

  @include it("uses the `.{prefix}{property-key}-{setting}` class name format") {
    $util-map: (
      prefix: "m",
      properties: ("t": margin-top),
      values: (
        "1": 1px,
        "2": 2px,
      ),
    );

    $expected: (
      ".mt-1": (margin-top: 1px),
      ".mt-2": (margin-top: 2px),
    );

    @include assert-equal(build-utility($util-map), $expected);
  }
}

@include describe("build-utilities [function]") {
  @include it("builds the utilities") {
    $utilities: (
      display: (
        properties: ("*": display),
        values: (
          "block": block,
          "hidden": none,
        ),
      ),
      margin: (
        prefix: "m",
        properties: ("*": margin),
        values: (
          "1": 1px,
          "2": 2px,
        ),
      ),
    );

    $expected: (
      ".block": (display: block),
      ".hidden": (display: none),
      ".m-1": (margin: 1px),
      ".m-2": (margin: 2px),
    );

    @include assert-equal(build-utilities($utilities), $expected);
  }

  @include it("groups media queries") {
    $utilities: (
      display: (
        properties: ("*": display),
        values: (
          "block": block,
          "hidden": none,
        ),
        modifiers: responsive,
      ),
      margin: (
        prefix: "m",
        properties: ("*": margin),
        values: (
          "1": 1px,
          "2": 2px,
        ),
        modifiers: responsive,
      ),
    );

    $expected: (
      ".block": (display: block),
      ".hidden": (display: none),
      ".m-1": (margin: 1px),
      ".m-2": (margin: 2px),
      "@media only screen and (min-width: 576px)": (
        ".sm\\:block": (display: block),
        ".sm\\:hidden": (display: none),
        ".sm\\:m-1": (margin: 1px),
        ".sm\\:m-2": (margin: 2px),
      ),
      "@media only screen and (min-width: 768px)": (
        ".md\\:block": (display: block),
        ".md\\:hidden": (display: none),
        ".md\\:m-1": (margin: 1px),
        ".md\\:m-2": (margin: 2px),
      ),
      "@media only screen and (min-width: 992px)": (
        ".lg\\:block": (display: block),
        ".lg\\:hidden": (display: none),
        ".lg\\:m-1": (margin: 1px),
        ".lg\\:m-2": (margin: 2px),
      ),
      "@media only screen and (min-width: 1200px)": (
        ".xl\\:block": (display: block),
        ".xl\\:hidden": (display: none),
        ".xl\\:m-1": (margin: 1px),
        ".xl\\:m-2": (margin: 2px),
      ),
    );

    $output: build-utilities($utilities);
    @include assert-equal($output, $expected);

    // Media queries should be last in the order
    @include assert-equal(
      nth(map-keys($output), -4),
      "@media only screen and (min-width: 576px)"
    );
    @include assert-equal(
      nth(map-keys($output), -3),
      "@media only screen and (min-width: 768px)"
    );
    @include assert-equal(
      nth(map-keys($output), -2),
      "@media only screen and (min-width: 992px)"
    );
    @include assert-equal(
      nth(map-keys($output), -1),
      "@media only screen and (min-width: 1200px)"
    );
  }
}
