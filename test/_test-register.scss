@function some-modifier () {@return 123};

@include describe("register-modifer [mixin]") {
  @include it("registers the modifier") {
    @include register-modifier("foo", "some-modifier");

    $expected: ("foo": get-function("some-modifier"));
    @include assert-equal(map-get($_df_modifiers, "foo"), get-function("some-modifier"));
  }
}

@include describe("get-modifier [function]") {
  @include it("returns the modifier") {
    @include register-modifier("foo", "some-modifier");

    $output: get-modifier("foo");
    $expected: get-function("some-modifier");
    @include assert-equal($output, $expected);
  }

  @include it("errors out when trying to get an unknown modifier") {
    $output: get-modifier("bar");
    $expected: "ERROR [get-modifier] Modifier `bar` not found.";
    @include assert-equal($output, $expected);
  }
}

@include describe("register-utility-map [mixin]") {
  @include it("adds the utility to the global utility tree") {
    $_df_utility_tree: () !global;

    $util-map: (
      prefix: "m",
      properties: ("*": margin),
      values: ("1": 1px),
      modifiers: hover,
    );
    @include register-utility-map("margin", $util-map);

    $expected: (
      ".m-1": (
        "margin": 1px,
      ),
      ".hover\\:m-1:hover": (
        "margin": 1px,
      ),
    );

    @include assert-equal($_df_utility_tree, $expected);
  }
}

@include describe("register-utility [mixin]") {
  @include it("adds the utility to the global utility tree") {
    $_df_utility_tree: () !global;
    $util-tree: (
      ".foo": (
        "margin": 1px,
        "padding": 1px,
      ),
    );

    @include register-utility("foo", $util-tree);

    @include assert-equal($_df_utility_tree, $util-tree);
  }
}
